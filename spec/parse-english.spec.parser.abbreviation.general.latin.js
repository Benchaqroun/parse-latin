var converter = require('..'),
    assert = require('assert');

describe('Abbreviations: latin', function () {
    it('should *not* treat the dot-character succeeding `ca` (abbreviation for `circa`), as a terminal marker', function () {
        var root = converter('The antique clock is from ca. 1900.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'The' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'antique' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'clock' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'from' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'ca' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '1900' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `cap` (abbreviation for `chapter`), as a terminal marker', function () {
        var root = converter('Electronic Transactions Ordinance (Cap. 553)');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'Electronic' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Transactions' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Ordinance' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '(' },
            { 'type': 'WordNode', 'value': 'Cap' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '553' },
            { 'type': 'PunctuationNode', 'value': ')' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `cf` (abbreviation for `bring together`), as a terminal marker', function () {
        var root = converter('These results were similar to those obtained using different techniques (cf. Wilson, 1999 and Ansmann, 1992)');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'These' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'results' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'were' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'similar' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'to' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'those' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'obtained' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'using' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'different' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'techniques' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '(' },
            { 'type': 'WordNode', 'value': 'cf' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Wilson' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '1999' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'and' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Ansmann' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '1992' },
            { 'type': 'PunctuationNode', 'value': ')' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `cp` (abbreviation for `compare`), as a terminal marker', function () {
        var root = converter('These results were similar to those obtained using different techniques (cf. Wilson, 1999 and Ansmann, 1992).');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'These' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'results' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'were' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'similar' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'to' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'those' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'obtained' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'using' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'different' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'techniques' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '(' },
            { 'type': 'WordNode', 'value': 'cf' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Wilson' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '1999' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'and' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Ansmann' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '1992' },
            { 'type': 'PunctuationNode', 'value': ')' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `cwt` (abbreviation for `centum weight`), as a terminal marker', function () {
        var root = converter('Hundredweight is abbreviated as cwt. because \'C\' is the Roman symbol for 100.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'Hundredweight' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'abbreviated' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'as' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'cwt' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'because' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '\'' },
            { 'type': 'WordNode', 'value': 'C' },
            { 'type': 'PunctuationNode', 'value': '\'' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'the' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Roman' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'symbol' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'for' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '100' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `ead` (abbreviation for `eadem`), as a terminal marker', function () {
        var root = converter('When quoting a female author, use the feminine form of idem, ead. (eadem).');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'When' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'quoting' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'a' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'female' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'author' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'use' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'the' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'feminine' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'form' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'of' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'idem' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'ead' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '(' },
            { 'type': 'WordNode', 'value': 'eadem' },
            { 'type': 'PunctuationNode', 'value': ')' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `al` (abbreviation for `(et) alii`), as a terminal marker', function () {
        var root = converter('These results agree with the ones published by Pelon et al. (2002).');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'These' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'results' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'agree' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'with' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'the' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'ones' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'published' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'by' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Pelon' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'et' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'al' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '(' },
            { 'type': 'WordNode', 'value': '2002' },
            { 'type': 'PunctuationNode', 'value': ')' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `etc` (abbreviation for `et cetera`), as a terminal marker', function () {
        var root = converter('Et cetera (abbreviated as etc. or &c.) is a Latin expression that means “and other things”, or “and so forth.”');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'Et' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'cetera' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '(' },
            { 'type': 'WordNode', 'value': 'abbreviated' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'as' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'etc' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'or' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '&' },
            { 'type': 'WordNode', 'value': 'c' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'PunctuationNode', 'value': ')' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'a' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Latin' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'expression' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'that' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'means' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '“' },
            { 'type': 'WordNode', 'value': 'and' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'other' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'things' },
            { 'type': 'PunctuationNode', 'value': '”' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'or' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '“' },
            { 'type': 'WordNode', 'value': 'and' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'so' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'forth' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'PunctuationNode', 'value': '”' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `fl` (abbreviation for `floruit`), as a terminal marker', function () {
        var root = converter('The great author Joseph Someone (fl. 2050-75) was renowned for his erudition.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'The' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'great' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'author' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Joseph' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Someone' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '(' },
            { 'type': 'WordNode', 'value': 'fl' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '2050' },
            { 'type': 'PunctuationNode', 'value': '-' },
            { 'type': 'WordNode', 'value': '75' },
            { 'type': 'PunctuationNode', 'value': ')' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'was' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'renowned' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'for' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'his' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'erudition' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `ff` (abbreviation for `foliis`), as a terminal marker', function () {
        var root = converter('As such, Hornblower 258f. would refer to pages 258–259 while 258ff. would refer to an undetermined number of pages following page 258.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'As' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'such' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Hornblower' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '258' },
            { 'type': 'WordNode', 'value': 'f' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'would' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'refer' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'to' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'pages' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '258' },
            { 'type': 'PunctuationNode', 'value': '–' },
            { 'type': 'WordNode', 'value': '259' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'while' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '258' },
            { 'type': 'WordNode', 'value': 'ff' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'would' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'refer' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'to' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'an' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'undetermined' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'number' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'of' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'pages' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'following' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'page' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': '258' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `ibid` (abbreviation for `ibidem`), as a terminal marker', function () {
        var root = converter('Ibid. (Latin, short for ibidem, meaning “in the same place”) is the term used to provide an endnote or footnote citation or reference for a source that was cited in the preceding endnote or footnote.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'Ibid' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '(' },
            { 'type': 'WordNode', 'value': 'Latin' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'short' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'for' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'ibidem' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'meaning' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '“' },
            { 'type': 'WordNode', 'value': 'in' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'the' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'same' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'place' },
            { 'type': 'PunctuationNode', 'value': '”' },
            { 'type': 'PunctuationNode', 'value': ')' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'the' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'term' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'used' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'to' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'provide' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'an' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'endnote' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'or' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'footnote' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'citation' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'or' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'reference' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'for' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'a' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'source' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'that' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'was' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'cited' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'in' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'the' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'preceding' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'endnote' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'or' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'footnote' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `id` (abbreviation for `idem`), as a terminal marker', function () {
        var root = converter('Id. is particularly used in legal citations.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'Id' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'particularly' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'used' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'in' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'legal' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'citations' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `nem` and `con` (in `nem. con.`, abbreviation for `nemine contradicente`), as a terminal marker', function () {
        var root = converter('The meaning of nemine contradicente is distinct from “unanimously”; nem. con. simply means that nobody voted against.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'The' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'meaning' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'of' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'nemine' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'contradicente' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'distinct' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'from' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '“' },
            { 'type': 'WordNode', 'value': 'unanimously' },
            { 'type': 'PunctuationNode', 'value': '”' },
            { 'type': 'PunctuationNode', 'value': ';' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'nem' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'con' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'simply' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'means' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'that' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'nobody' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'voted' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'against' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `op` and `cit` (in `op. cit.`, abbreviation for `opere (citato)`), as a terminal marker', function () {
        var root = converter('As usual with foreign words and phrases, op. cit. is typically given in italics.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'As' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'usual' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'with' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'foreign' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'words' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'and' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'phrases' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'op' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'cit' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'typically' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'given' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'in' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'italics' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `cent` (abbreviation for `(per) cent`), as a terminal marker', function () {
        var root = converter('The form per cent. is still in use as a part of highly formal language.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'The' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'form' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'per' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'cent' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'still' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'in' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'use' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'as' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'a' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'part' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'of' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'highly' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'formal' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'language' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `pro` (abbreviation for `(per) procurationem`), as a terminal marker', function () {
        var root = converter('Procuration (per procurationem), or shortly per pro., or simply p.p.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'Procuration' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '(' },
            { 'type': 'WordNode', 'value': 'per' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'procurationem' },
            { 'type': 'PunctuationNode', 'value': ')' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'or' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'shortly' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'per' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'pro' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'or' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'simply' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'p' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WordNode', 'value': 'p' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `tem` (abbreviation for `(pro) tempore`), as a terminal marker', function () {
        var root = converter('Legislative bodies can have one or more pro tem. for the presiding officer.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'Legislative' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'bodies' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'can' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'have' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'one' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'or' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'more' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'pro' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'tem' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'for' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'the' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'presiding' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'officer' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `sic` (abbreviation for `sic erat scriptum`), as a terminal marker', function () {
        var root = converter('Sic., or sic erat scriptum, is Latin for “Thus it was written.”');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'Sic' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'or' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'sic' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'erat' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'scriptum' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'Latin' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'for' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'PunctuationNode', 'value': '“' },
            { 'type': 'WordNode', 'value': 'Thus' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'it' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'was' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'written' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'PunctuationNode', 'value': '”' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `seq` (abbreviation for `(et) sequentia`), as a terminal marker', function () {
        var root = converter('The phrase et seq. is used to indicate that the information is continued on the denoted pages or sections.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'The' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'phrase' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'et' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'seq' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'used' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'to' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'indicate' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'that' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'the' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'information' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'is' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'continued' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'on' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'the' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'denoted' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'pages' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'or' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'sections' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `stat` (abbreviation for `statim`), as a terminal marker', function () {
        var root = converter('That patient needs attention, stat.!');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'That' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'patient' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'needs' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'attention' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'stat' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'PunctuationNode', 'value': '!' }
        ]}]}]}));
    });

    it('should *not* treat the dot-character succeeding `viz` (abbreviation for `videlicet`), as a terminal marker', function () {
        var root = converter('The noble gases, viz. helium, neon, argon, xenon, krypton and radon, show a non-expected behaviour when exposed to this new element.');
        assert(root.toAST() === JSON.stringify({'type':'RootNode','children':[{'type':'ParagraphNode','children':[{'type':'SentenceNode','children':[
            { 'type': 'WordNode', 'value': 'The' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'noble' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'gases' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'viz' },
            { 'type': 'PunctuationNode', 'value': '.' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'helium' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'neon' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'argon' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'xenon' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'krypton' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'and' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'radon' },
            { 'type': 'PunctuationNode', 'value': ',' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'show' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'a' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'non' },
            { 'type': 'PunctuationNode', 'value': '-' },
            { 'type': 'WordNode', 'value': 'expected' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'behaviour' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'when' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'exposed' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'to' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'this' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'new' },
            { 'type': 'WhiteSpaceNode', 'value': ' ' },
            { 'type': 'WordNode', 'value': 'element' },
            { 'type': 'PunctuationNode', 'value': '.' }
        ]}]}]}));
    });
});
